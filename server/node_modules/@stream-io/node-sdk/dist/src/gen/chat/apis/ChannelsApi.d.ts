/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v92.7.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ChannelGetOrCreateRequest, ChannelStateResponse, ChannelsResponse, DeleteChannelResponse, DeleteChannelsRequest, DeleteChannelsResponse, ExportChannelsRequest, ExportChannelsResponse, GetExportChannelsStatusResponse, HideChannelRequest, HideChannelResponse, MarkChannelsReadRequest, MarkReadRequest, MarkReadResponse, MarkUnreadRequest, MembersResponse, MuteChannelRequest, MuteChannelResponse, QueryChannelsRequest, QueryMembersRequest, Response, SearchRequest, SearchResponse, ShowChannelRequest, ShowChannelResponse, TruncateChannelRequest, TruncateChannelResponse, UnmuteChannelRequest, UnmuteResponse, UnreadCountsResponse, UpdateChannelPartialRequest, UpdateChannelPartialResponse, UpdateChannelRequest, UpdateChannelResponse } from '../models';
export interface DeleteChannelRequest {
    type: string;
    id: string;
    hardDelete?: boolean;
}
export interface DeleteChannelsOperationRequest {
    deleteChannelsRequest: DeleteChannelsRequest | null;
}
export interface ExportChannelsOperationRequest {
    exportChannelsRequest: ExportChannelsRequest | null;
}
export interface GetExportChannelsStatusRequest {
    id: string;
}
export interface GetOrCreateChannelRequest {
    type: string;
    id: string;
    channelGetOrCreateRequest: ChannelGetOrCreateRequest | null;
}
export interface HideChannelOperationRequest {
    type: string;
    id: string;
    hideChannelRequest: HideChannelRequest | null;
}
export interface MarkChannelsReadOperationRequest {
    markChannelsReadRequest: MarkChannelsReadRequest | null;
}
export interface MarkReadOperationRequest {
    type: string;
    id: string;
    markReadRequest: MarkReadRequest | null;
}
export interface MarkUnreadOperationRequest {
    type: string;
    id: string;
    markUnreadRequest: MarkUnreadRequest | null;
}
export interface MuteChannelOperationRequest {
    muteChannelRequest: MuteChannelRequest | null;
}
export interface QueryChannelsOperationRequest {
    queryChannelsRequest: QueryChannelsRequest | null;
}
export interface QueryMembersOperationRequest {
    payload?: QueryMembersRequest;
}
export interface SearchOperationRequest {
    payload?: SearchRequest;
}
export interface ShowChannelOperationRequest {
    type: string;
    id: string;
    showChannelRequest: ShowChannelRequest | null;
}
export interface TruncateChannelOperationRequest {
    type: string;
    id: string;
    truncateChannelRequest: TruncateChannelRequest | null;
}
export interface UnmuteChannelOperationRequest {
    unmuteChannelRequest: UnmuteChannelRequest | null;
}
export interface UpdateChannelOperationRequest {
    type: string;
    id: string;
    updateChannelRequest: UpdateChannelRequest | null;
}
export interface UpdateChannelPartialOperationRequest {
    type: string;
    id: string;
    updateChannelPartialRequest: UpdateChannelPartialRequest | null;
}
/**
 *
 */
export declare class ChannelsApi extends runtime.BaseAPI {
    /**
     * Deletes channel  Sends events: - channel.deleted  Required permissions: - DeleteChannel
     * Delete channel
     */
    deleteChannelRaw(requestParameters: DeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteChannelResponse>>;
    /**
     * Deletes channel  Sends events: - channel.deleted  Required permissions: - DeleteChannel
     * Delete channel
     */
    deleteChannel(requestParameters: DeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteChannelResponse>;
    /**
     * Allows to delete several channels at once asynchronously  Sends events: - channel.deleted  Required permissions: - DeleteChannel
     * Deletes channels asynchronously
     */
    deleteChannelsRaw(requestParameters: DeleteChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteChannelsResponse>>;
    /**
     * Allows to delete several channels at once asynchronously  Sends events: - channel.deleted  Required permissions: - DeleteChannel
     * Deletes channels asynchronously
     */
    deleteChannels(requestParameters: DeleteChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteChannelsResponse>;
    /**
     * Exports channel data to JSON file
     * Export channels
     */
    exportChannelsRaw(requestParameters: ExportChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportChannelsResponse>>;
    /**
     * Exports channel data to JSON file
     * Export channels
     */
    exportChannels(requestParameters: ExportChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportChannelsResponse>;
    /**
     *
     * Export channels status
     */
    getExportChannelsStatusRaw(requestParameters: GetExportChannelsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetExportChannelsStatusResponse>>;
    /**
     *
     * Export channels status
     */
    getExportChannelsStatus(requestParameters: GetExportChannelsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExportChannelsStatusResponse>;
    /**
     * This method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start
     * Get or create channel
     */
    getOrCreateChannelRaw(requestParameters: GetOrCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelStateResponse>>;
    /**
     * This method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start
     * Get or create channel
     */
    getOrCreateChannel(requestParameters: GetOrCreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelStateResponse>;
    /**
     * Marks channel as hidden for current user  Sends events: - channel.hidden  Required permissions: - ReadChannel
     * Hide channel
     */
    hideChannelRaw(requestParameters: HideChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HideChannelResponse>>;
    /**
     * Marks channel as hidden for current user  Sends events: - channel.hidden  Required permissions: - ReadChannel
     * Hide channel
     */
    hideChannel(requestParameters: HideChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HideChannelResponse>;
    /**
     * Marks channels as read up to the specific message. If no channels is given, mark all channel as read  Sends events: - message.read  Required permissions: - ReadChannel
     * Mark channels as read
     */
    markChannelsReadRaw(requestParameters: MarkChannelsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarkReadResponse>>;
    /**
     * Marks channels as read up to the specific message. If no channels is given, mark all channel as read  Sends events: - message.read  Required permissions: - ReadChannel
     * Mark channels as read
     */
    markChannelsRead(requestParameters: MarkChannelsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarkReadResponse>;
    /**
     * Marks channel as read up to the specific message  Sends events: - message.read  Required permissions: - ReadChannel
     * Mark read
     */
    markReadRaw(requestParameters: MarkReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarkReadResponse>>;
    /**
     * Marks channel as read up to the specific message  Sends events: - message.read  Required permissions: - ReadChannel
     * Mark read
     */
    markRead(requestParameters: MarkReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarkReadResponse>;
    /**
     * Marks channel as unread from a specific message  Required permissions: - ReadChannel
     * Mark unread
     */
    markUnreadRaw(requestParameters: MarkUnreadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Marks channel as unread from a specific message  Required permissions: - ReadChannel
     * Mark unread
     */
    markUnread(requestParameters: MarkUnreadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Mutes channel for user  Sends events: - channel.muted  Required permissions: - MuteChannel
     * Mute channel
     */
    muteChannelRaw(requestParameters: MuteChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MuteChannelResponse>>;
    /**
     * Mutes channel for user  Sends events: - channel.muted  Required permissions: - MuteChannel
     * Mute channel
     */
    muteChannel(requestParameters: MuteChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MuteChannelResponse>;
    /**
     * Query channels with filter query  Required permissions: - ReadChannel
     * Query channels
     */
    queryChannelsRaw(requestParameters: QueryChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelsResponse>>;
    /**
     * Query channels with filter query  Required permissions: - ReadChannel
     * Query channels
     */
    queryChannels(requestParameters: QueryChannelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelsResponse>;
    /**
     * Find and filter channel members  Required permissions: - ReadChannel
     * Query members
     */
    queryMembersRaw(requestParameters: QueryMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembersResponse>>;
    /**
     * Find and filter channel members  Required permissions: - ReadChannel
     * Query members
     */
    queryMembers(requestParameters?: QueryMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembersResponse>;
    /**
     * Search messages across channels  Required permissions: - ReadChannel
     * Search messages
     */
    searchRaw(requestParameters: SearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>>;
    /**
     * Search messages across channels  Required permissions: - ReadChannel
     * Search messages
     */
    search(requestParameters?: SearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse>;
    /**
     * Shows previously hidden channel  Sends events: - channel.visible
     * Show channel
     */
    showChannelRaw(requestParameters: ShowChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowChannelResponse>>;
    /**
     * Shows previously hidden channel  Sends events: - channel.visible
     * Show channel
     */
    showChannel(requestParameters: ShowChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowChannelResponse>;
    /**
     * Truncates channel  Sends events: - channel.truncated  Required permissions: - DeleteChannel - TruncateChannel
     * Truncate channel
     */
    truncateChannelRaw(requestParameters: TruncateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TruncateChannelResponse>>;
    /**
     * Truncates channel  Sends events: - channel.truncated  Required permissions: - DeleteChannel - TruncateChannel
     * Truncate channel
     */
    truncateChannel(requestParameters: TruncateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TruncateChannelResponse>;
    /**
     * Unmutes channel for user  Sends events: - channel.unmuted  Required permissions: - MuteChannel
     * Unmute channel
     */
    unmuteChannelRaw(requestParameters: UnmuteChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnmuteResponse>>;
    /**
     * Unmutes channel for user  Sends events: - channel.unmuted  Required permissions: - MuteChannel
     * Unmute channel
     */
    unmuteChannel(requestParameters: UnmuteChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnmuteResponse>;
    /**
     * UnreadCount counts
     * UnreadCount counts
     */
    unreadCountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnreadCountsResponse>>;
    /**
     * UnreadCount counts
     * UnreadCount counts
     */
    unreadCounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnreadCountsResponse>;
    /**
     * Change channel data  Sends events: - channel.updated - member.added - member.removed - member.updated - message.new  Required permissions: - AddOwnChannelMembership - RemoveOwnChannelMembership - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen - UpdateChannelMembers
     * Update channel
     */
    updateChannelRaw(requestParameters: UpdateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateChannelResponse>>;
    /**
     * Change channel data  Sends events: - channel.updated - member.added - member.removed - member.updated - message.new  Required permissions: - AddOwnChannelMembership - RemoveOwnChannelMembership - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen - UpdateChannelMembers
     * Update channel
     */
    updateChannel(requestParameters: UpdateChannelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateChannelResponse>;
    /**
     * Updates certain fields of the channel  Sends events: - channel.updated  Required permissions: - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen
     * Partially update channel
     */
    updateChannelPartialRaw(requestParameters: UpdateChannelPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateChannelPartialResponse>>;
    /**
     * Updates certain fields of the channel  Sends events: - channel.updated  Required permissions: - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen
     * Partially update channel
     */
    updateChannelPartial(requestParameters: UpdateChannelPartialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateChannelPartialResponse>;
}
