/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v92.7.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { BanRequest, CreateBlockListRequest, DeactivateUserRequest, DeactivateUserResponse, DeactivateUsersRequest, DeactivateUsersResponse, DeleteUserResponse, DeleteUsersRequest, DeleteUsersResponse, FlagRequest, FlagResponse, GetBlockListResponse, ListBlockListResponse, MuteUserRequest, MuteUserResponse, QueryBannedUsersRequest, QueryBannedUsersResponse, QueryMessageFlagsRequest, QueryMessageFlagsResponse, ReactivateUserRequest, ReactivateUserResponse, ReactivateUsersRequest, ReactivateUsersResponse, Response, UnmuteResponse, UnmuteUserRequest, UpdateBlockListRequest } from '../models';
export interface BanOperationRequest {
    banRequest: BanRequest | null;
}
export interface CreateBlockListOperationRequest {
    createBlockListRequest: CreateBlockListRequest | null;
}
export interface DeactivateUserOperationRequest {
    userId: string;
    deactivateUserRequest: DeactivateUserRequest | null;
}
export interface DeactivateUsersOperationRequest {
    deactivateUsersRequest: DeactivateUsersRequest | null;
}
export interface DeleteBlockListRequest {
    name: string;
}
export interface DeleteUserRequest {
    userId: string;
    markMessagesDeleted?: boolean;
    hardDelete?: boolean;
    deleteConversationChannels?: boolean;
}
export interface DeleteUsersOperationRequest {
    deleteUsersRequest: DeleteUsersRequest | null;
}
export interface FlagOperationRequest {
    flagRequest: FlagRequest | null;
}
export interface GetBlockListRequest {
    name: string;
}
export interface MuteUserOperationRequest {
    muteUserRequest: MuteUserRequest | null;
}
export interface QueryBannedUsersOperationRequest {
    payload?: QueryBannedUsersRequest;
}
export interface QueryMessageFlagsOperationRequest {
    payload?: QueryMessageFlagsRequest;
}
export interface ReactivateUserOperationRequest {
    userId: string;
    reactivateUserRequest: ReactivateUserRequest | null;
}
export interface ReactivateUsersOperationRequest {
    reactivateUsersRequest: ReactivateUsersRequest | null;
}
export interface UnbanRequest {
    targetUserId?: string;
    type?: string;
    id?: string;
    createdBy?: string;
}
export interface UnflagRequest {
    flagRequest: FlagRequest | null;
}
export interface UnmuteUserOperationRequest {
    unmuteUserRequest: UnmuteUserRequest | null;
}
export interface UpdateBlockListOperationRequest {
    name: string;
    updateBlockListRequest: UpdateBlockListRequest | null;
}
/**
 *
 */
export declare class ModerationApi extends runtime.BaseAPI {
    /**
     * Restricts user activity either in specific channel or globally  Sends events: - user.banned  Required permissions: - BanChannelMember - BanUser
     * Ban user
     */
    banRaw(requestParameters: BanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Restricts user activity either in specific channel or globally  Sends events: - user.banned  Required permissions: - BanChannelMember - BanUser
     * Ban user
     */
    ban(requestParameters: BanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Creates a new application blocklist, once created the blocklist can be used by any channel type
     * Create block list
     */
    createBlockListRaw(requestParameters: CreateBlockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Creates a new application blocklist, once created the blocklist can be used by any channel type
     * Create block list
     */
    createBlockList(requestParameters: CreateBlockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated
     * Deactivate user
     */
    deactivateUserRaw(requestParameters: DeactivateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeactivateUserResponse>>;
    /**
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated
     * Deactivate user
     */
    deactivateUser(requestParameters: DeactivateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeactivateUserResponse>;
    /**
     * Deactivate users in batches  Sends events: - user.deactivated
     * Deactivate users
     */
    deactivateUsersRaw(requestParameters: DeactivateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeactivateUsersResponse>>;
    /**
     * Deactivate users in batches  Sends events: - user.deactivated
     * Deactivate users
     */
    deactivateUsers(requestParameters: DeactivateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeactivateUsersResponse>;
    /**
     * Deletes previously created application blocklist
     * Delete block list
     */
    deleteBlockListRaw(requestParameters: DeleteBlockListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Deletes previously created application blocklist
     * Delete block list
     */
    deleteBlockList(requestParameters: DeleteBlockListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Deletes user and optionally all their belongings. The Endpoint is deprecated, please use \'Delete Users\' endpoint instead  Sends events: - channel.deleted - message.deleted - user.deleted
     * Delete user
     */
    deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUserResponse>>;
    /**
     * Deletes user and optionally all their belongings. The Endpoint is deprecated, please use \'Delete Users\' endpoint instead  Sends events: - channel.deleted - message.deleted - user.deleted
     * Delete user
     */
    deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUserResponse>;
    /**
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted
     * Delete Users
     */
    deleteUsersRaw(requestParameters: DeleteUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUsersResponse>>;
    /**
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted
     * Delete Users
     */
    deleteUsers(requestParameters: DeleteUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUsersResponse>;
    /**
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser
     * Flag
     */
    flagRaw(requestParameters: FlagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagResponse>>;
    /**
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser
     * Flag
     */
    flag(requestParameters: FlagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagResponse>;
    /**
     * Returns block list by given name
     * Get block list
     */
    getBlockListRaw(requestParameters: GetBlockListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockListResponse>>;
    /**
     * Returns block list by given name
     * Get block list
     */
    getBlockList(requestParameters: GetBlockListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockListResponse>;
    /**
     * Returns all available block lists
     * List block lists
     */
    listBlockListsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListBlockListResponse>>;
    /**
     * Returns all available block lists
     * List block lists
     */
    listBlockLists(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListBlockListResponse>;
    /**
     * Mutes one or several users  Sends events: - user.muted  Required permissions: - MuteUser
     * Mute user
     */
    muteUserRaw(requestParameters: MuteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MuteUserResponse>>;
    /**
     * Mutes one or several users  Sends events: - user.muted  Required permissions: - MuteUser
     * Mute user
     */
    muteUser(requestParameters: MuteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MuteUserResponse>;
    /**
     * Find and filter channel scoped or global user bans  Required permissions: - ReadChannel
     * Query Banned Users
     */
    queryBannedUsersRaw(requestParameters: QueryBannedUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryBannedUsersResponse>>;
    /**
     * Find and filter channel scoped or global user bans  Required permissions: - ReadChannel
     * Query Banned Users
     */
    queryBannedUsers(requestParameters?: QueryBannedUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryBannedUsersResponse>;
    /**
     * Find and filter message flags  Required permissions: - ReadMessageFlags
     * Query Message Flags
     */
    queryMessageFlagsRaw(requestParameters: QueryMessageFlagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryMessageFlagsResponse>>;
    /**
     * Find and filter message flags  Required permissions: - ReadMessageFlags
     * Query Message Flags
     */
    queryMessageFlags(requestParameters?: QueryMessageFlagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryMessageFlagsResponse>;
    /**
     * Activates user who\'s been deactivated previously  Sends events: - user.reactivated
     * Reactivate user
     */
    reactivateUserRaw(requestParameters: ReactivateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactivateUserResponse>>;
    /**
     * Activates user who\'s been deactivated previously  Sends events: - user.reactivated
     * Reactivate user
     */
    reactivateUser(requestParameters: ReactivateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactivateUserResponse>;
    /**
     * Reactivate users in batches  Sends events: - user.reactivated
     * Reactivate users
     */
    reactivateUsersRaw(requestParameters: ReactivateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactivateUsersResponse>>;
    /**
     * Reactivate users in batches  Sends events: - user.reactivated
     * Reactivate users
     */
    reactivateUsers(requestParameters: ReactivateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactivateUsersResponse>;
    /**
     * Removes previously applied ban  Sends events: - user.unbanned  Required permissions: - BanChannelMember - BanUser
     * Unban user
     */
    unbanRaw(requestParameters: UnbanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Removes previously applied ban  Sends events: - user.unbanned  Required permissions: - BanChannelMember - BanUser
     * Unban user
     */
    unban(requestParameters?: UnbanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
    /**
     * Removes previously created user or message flag  Required permissions: - FlagMessage - FlagUser
     * Unflag
     */
    unflagRaw(requestParameters: UnflagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagResponse>>;
    /**
     * Removes previously created user or message flag  Required permissions: - FlagMessage - FlagUser
     * Unflag
     */
    unflag(requestParameters: UnflagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagResponse>;
    /**
     * Unmutes previously muted user  Sends events: - user.unmuted  Required permissions: - MuteUser
     * Unmute user
     */
    unmuteUserRaw(requestParameters: UnmuteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnmuteResponse>>;
    /**
     * Unmutes previously muted user  Sends events: - user.unmuted  Required permissions: - MuteUser
     * Unmute user
     */
    unmuteUser(requestParameters: UnmuteUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnmuteResponse>;
    /**
     * Updates contents of the block list
     * Update block list
     */
    updateBlockListRaw(requestParameters: UpdateBlockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>>;
    /**
     * Updates contents of the block list
     * Update block list
     */
    updateBlockList(requestParameters: UpdateBlockListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response>;
}
