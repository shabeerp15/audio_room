/// <reference types="node" />
import { StreamChatClient } from './StreamChatClient';
import { StreamVideoClient } from './StreamVideoClient';
import { BanRequest, CheckPushRequest, CreateDeviceRequest, CreateRoleRequest, DeactivateUserRequest, DeactivateUsersRequest, DeleteDeviceRequest, DeletePushProviderRequest, DeleteRoleRequest, DeleteUserRequest, DeleteUsersRequest, ExportUserRequest, ExportUsersRequest, FlagRequest, GetPermissionRequest, GetTaskRequest, GuestRequest, ListDevicesRequest, MuteUserRequest, PushProviderRequest, QueryBannedUsersRequest, QueryUsersRequest, ReactivateUserRequest, ReactivateUsersRequest, RestoreUsersRequest, UnbanRequest, UnmuteUserRequest, UpdateAppRequest, UpdateUserPartialRequest, UpdateUsersRequest, UserCustomEventRequest } from './gen/chat';
import { Configuration } from './gen/video';
export interface StreamClientOptions {
    timeout?: number;
    basePath?: string;
}
export declare class StreamClient {
    private readonly apiKey;
    private readonly secret;
    readonly config?: string | StreamClientOptions | undefined;
    readonly video: StreamVideoClient;
    readonly chat: StreamChatClient;
    readonly options: StreamClientOptions;
    private readonly usersApi;
    private readonly devicesApi;
    private readonly pushApi;
    private readonly serversideApi;
    private readonly testingApi;
    private readonly permissionsApi;
    private readonly settingsApi;
    private readonly eventsApi;
    private readonly tasksApi;
    private readonly token;
    private static readonly DEFAULT_TIMEOUT;
    /**
     *
     * @param apiKey
     * @param secret
     * @param config can be a string, which will be interpreted as base path (deprecated), or a config object
     */
    constructor(apiKey: string, secret: string, config?: string | StreamClientOptions | undefined);
    /**
     *
     * @param userID
     * @param exp
     * @param iat deprecated, the default date will be set internally
     * @param call_cids this parameter is deprecated use `createCallToken` for call tokens
     * @returns
     */
    createToken(userID: string, exp?: number, iat?: number, call_cids?: string[]): string;
    /**
     *
     * @param userID
     * @param call_cids
     * @param exp
     * @param iat this is deprecated, the current date will be set internally
     * @returns
     */
    createCallToken(userIdOrObject: string | {
        user_id: string;
        role?: string;
    }, call_cids: string[], exp?: number, iat?: number): string;
    createDevice: (createDeviceRequest: CreateDeviceRequest) => Promise<void>;
    deleteDevice: (requestParameters: DeleteDeviceRequest) => Promise<import("./gen/chat").Response>;
    listDevices: (requestParameters: ListDevicesRequest) => Promise<import("./gen/chat").ListDevicesResponse>;
    listPushProviders: () => Promise<import("./gen/chat").ListPushProvidersResponse>;
    deletePushProvider: (request: DeletePushProviderRequest) => Promise<import("./gen/chat").Response>;
    upsertPushProvider: (request: PushProviderRequest) => Promise<import("./gen/chat").UpsertPushProviderResponse>;
    checkPush: (checkPushRequest: CheckPushRequest) => Promise<import("./gen/chat").CheckPushResponse>;
    createGuest: (guestRequest: GuestRequest) => Promise<import("./gen/chat").GuestResponse>;
    banUser: (banRequest: BanRequest) => Promise<import("./gen/chat").Response>;
    deactivateUser: (deactivateUserRequest: DeactivateUserRequest) => Promise<import("./gen/chat").DeactivateUserResponse>;
    deactivateUsers: (deactivateUsersRequest: DeactivateUsersRequest) => Promise<import("./gen/chat").DeactivateUsersResponse>;
    /**
     * @deprecated use `deleteUsers` instead
     * @param deleteUsersRequest
     * @returns
     */
    deleteUser: (request: DeleteUserRequest) => Promise<import("./gen/chat").DeleteUserResponse>;
    deleteUsers: (deleteUsersRequest: DeleteUsersRequest) => Promise<import("./gen/chat").DeleteUsersResponse>;
    exportUser: (request: ExportUserRequest) => Promise<import("./gen/chat").ExportUserResponse>;
    exportUsers: (exportUsersRequest: ExportUsersRequest) => Promise<import("./gen/chat").ExportUsersResponse>;
    flag: (flagRequest: FlagRequest) => Promise<import("./gen/chat").FlagResponse>;
    queryBannedUsers: (payload: QueryBannedUsersRequest) => Promise<import("./gen/chat").QueryBannedUsersResponse>;
    queryUsers: (payload: QueryUsersRequest) => Promise<import("./gen/chat").UsersResponse>;
    reactivateUser: (reactivateUserRequest: ReactivateUserRequest) => Promise<void>;
    reactivateUsers: (reactivateUsersRequest: ReactivateUsersRequest) => Promise<import("./gen/chat").ReactivateUsersResponse>;
    restoreUsers: (restoreUsersRequest: RestoreUsersRequest) => Promise<import("./gen/chat").Response>;
    unbanUser: (request: UnbanRequest) => Promise<import("./gen/chat").Response>;
    unflag: (flagRequest: FlagRequest) => Promise<import("./gen/chat").FlagResponse>;
    upsertUsers: (updateUsersRequest: UpdateUsersRequest) => Promise<import("./gen/chat").UpdateUsersResponse>;
    updateUsersPartial: (request: {
        users: UpdateUserPartialRequest[];
    }) => Promise<import("./gen/chat").UpdateUsersResponse>;
    muteUser: (muteUserRequest: MuteUserRequest) => Promise<import("./gen/chat").MuteUserResponse>;
    unmuteUser: (unmuteUserRequest: UnmuteUserRequest) => Promise<import("./gen/chat").UnmuteResponse>;
    sendCustomEventToUser: (userId: string, event: UserCustomEventRequest) => Promise<import("./gen/chat").Response>;
    createRole: (createRoleRequest: CreateRoleRequest) => Promise<import("./gen/chat").CreateRoleResponse>;
    deleteRole: (request: DeleteRoleRequest) => Promise<import("./gen/chat").Response>;
    getPermission: (request: GetPermissionRequest) => Promise<import("./gen/chat").GetCustomPermissionResponse>;
    listPermissions: () => Promise<import("./gen/chat").ListPermissionsResponse>;
    listRoles: () => Promise<import("./gen/chat").ListRolesResponse>;
    getAppSettings: () => Promise<import("./gen/chat").GetApplicationResponse>;
    updateAppSettings: (updateAppRequest: UpdateAppRequest) => Promise<import("./gen/chat").Response>;
    getRateLimits: () => Promise<import("./gen/chat").GetRateLimitsResponse>;
    getTaskStatus: (request: GetTaskRequest) => Promise<import("./gen/chat").GetTaskResponse>;
    verifyWebhook: (requestBody: string | Buffer, xSignature: string) => boolean;
    getConfiguration: (product?: 'chat' | 'video') => Configuration;
    private readonly reservedKeywords;
    private readonly mapCustomDataBeforeSend;
    private mapCustomDataAfterReceive;
}
